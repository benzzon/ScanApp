@page "/"
@page "/home"
@using System.Diagnostics
@using Microsoft.JSInterop
@using System.Text.RegularExpressions
@inject ILogger<Index> Logger
@inject IToastService ToastService
@inject NavigationManager NavManager
@inject IJSRuntime JavaScript
@inject SweetAlertService Swal

<PageTitle>Home</PageTitle>

<h1>Get scan-data..</h1>

<div>
    <!-- Wrap FluentTextField in a container, but not needed when using the "Autofocus-attribute" of the FluentTextField -->
    <div @ref="inputContainer">
        <input @ref="scanInputRef" spellcheck="false" class="no-border" placeholder="" @bind="HID_Input" @oninput="OnInput" @onfocus="OnScanInputFocus" @onfocusout="OnScanInputFocusOut" />
        <br />
    </div>

    <FluentButton IconStart="@(new Icons.Regular.Size16.Info())" @onclick="ShowInfo">
        Show toast-info
    </FluentButton>

    <FluentSwitch id="theSwitch" Style="margin-left: 1em;" @bind-Value="@BarscanEnabled" @onclick="BarscanSwitchClick">Barscan</FluentSwitch>
    <br /><br />

</div>

<br />
<FluentStack Orientation="Orientation.Vertical" VerticalGap="10">
    <FluentTextArea @ref="areaScanTotalRef" style="width: 400px;" @bind-Value="inputScanTotal"></FluentTextArea>

    <FluentButton IconStart="@(new Icons.Regular.Size16.AnimalCat())" @onclick="ClearInput">
        Clear input
    </FluentButton>

</FluentStack>
<br />
<br />

<FluentCard Class="status-bar">
    <span>Debug: @lastKeyTime - @inputBuffer.Length</span>
</FluentCard>

@code {
    //private List<Bike>? motorcycles;
    private bool justStarted = true;
    private ElementReference inputContainer;
    private string toastMessage = string.Empty;
    private bool dialogResult = false;

    private async Task ShowInfo()
    {
        var result = await Swal.FireAsync(new SweetAlertOptions
            {
                Title = "Confirmation",
                Text = "This is a test, do you want to continue?",
                Icon = SweetAlertIcon.Warning,
                Position = SweetAlertPosition.Top,
                ShowCancelButton = true,
                ConfirmButtonText = "Yes",
                CancelButtonText = "No",
                KeydownListenerCapture = true,
                Footer = "<a href=https://www.benzzon.se target=_blank>Read entire log here</a>"
            });

        dialogResult = !string.IsNullOrEmpty(result.Value);
        ToastService.ShowToast(ToastIntent.Info, "Result from what you selected: " + dialogResult, 5000);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                // Call JavaScript to find and focus the native input element inside the FluentTextField component
                // await JavaScript.InvokeVoidAsync("focusFluentTextField", inputContainer);
            }
            catch (Exception ex)
            {
                // Handle error
                Console.WriteLine($"Error invoking JS function: {ex.Message}");
            }
        }

    }

    private async Task<ElementReference?> GetInputElementAsync(ElementReference container)
    {
        // Query the container for the input element using JS Interop
        var inputElement = await JavaScript.InvokeAsync<ElementReference>("getInputElementFromContainer", container);
        return inputElement;
    }


    private string? HID_Input = string.Empty;
    private string inputBuffer = string.Empty;
    private string inputScanTotal = string.Empty;
    private bool capturing = false;
    private DateTime lastKeyTime;
    private string displayMessage = "";
    private string prefix = "!!";  // Define the prefix as a string variable
    private int delayTime = 1000;
    private bool _barscanEnabled;
    private bool SuppressFocusOutEvent = false;
    private ElementReference scanInputRef;
    private FluentTextArea areaScanTotalRef;

    private bool BarscanEnabled
    {
        get => _barscanEnabled;
        set
        {
            _barscanEnabled = value;
        }
    }
    private void BarscanSwitchClick()
    {
        if (BarscanEnabled)
        {
            //SuppressFocusOutEvent = true;
            ToastService.ShowToast(ToastIntent.Success, "Barscan enabled", 5000);
            BarscanEnabled = true;
            scanInputRef.FocusAsync();
        }
    }

    private async Task OnInput(ChangeEventArgs e)
    {
        var hidString = e.Value?.ToString();

        inputBuffer = hidString;
        lastKeyTime = DateTime.UtcNow;
        if (inputBuffer.StartsWith(prefix))
        {
            capturing = true;
            lastKeyTime = DateTime.UtcNow;
            await StartCaptureTimer();
        }
        else
        {
            inputBuffer = string.Empty; // Reset the string if sequence doesn't match prefix
        }
    }
    private async Task OnScanInputFocus()
    {
    }
    private async Task OnScanInputFocusOut()
    {
        if (SuppressFocusOutEvent)
        {
        }
        else
        {
            BarscanEnabled = false;
            ToastService.ShowToast(ToastIntent.Info, "Barscan deactivated..", 5000);
        }
    }

    private async Task StartCaptureTimer()
    {
        while (capturing)
        {
            await Task.Delay(delayTime);
            if ((DateTime.UtcNow - lastKeyTime).TotalMilliseconds >= delayTime && inputBuffer != string.Empty)
            {
                capturing = false;
                string capturedSequence = inputBuffer.StartsWith(prefix) ? inputBuffer.Substring(prefix.Length) : inputBuffer;
                ToastService.ShowToast(ToastIntent.Warning, $"Captured: {capturedSequence}", 7000);

                inputScanTotal = inputScanTotal + capturedSequence + Environment.NewLine;
                inputBuffer = string.Empty;
                HID_Input = string.Empty; // Does not seem to work..?
                //areaScanTotalRef.FocusAsync();

                lastKeyTime = DateTime.MinValue;
                StateHasChanged(); // Refresh UI

            }
        }
    }
    private async Task ClearInput()
    {
        inputScanTotal = string.Empty;
        HID_Input = string.Empty;
    }
}
